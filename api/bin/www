/**
 * Created by BJ Rutledge
 * Date:2022-08-29
 * Living with Conviction.org
 * Living with Conviction Form Filler API
 */

const app = require('../app');
const http = require('http');
const { logger, levels: loggerLevels } = require('../src/lib/logger');
const { bind } = require('../src/lib/pdfForms/gr39/gr39formSchema');

const port = normalizePort(app.config.PORT);
const server = http.createServer();
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * This function is a safety railguard to make sure the port
 * provided is number , if not a number then a string and if
 * anything else set it to false
 * @param val any
 * @returns Port or false
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }
  logger.log(
    loggerLevels.warn,
    `Port is not of type number or string, it is of type:${ty   peof port}. PORT:${port}`
  );
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

 function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  logger.log(`Listening on ${bind}`);
}
